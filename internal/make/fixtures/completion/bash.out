### bash completion for go-make
function _go-make-filter() {
    awk -v prefix=^${1} -v pat="[-/]" '
        function min(x, y, l) {
            while (substr(x, 0, l) != substr(y, 0, l)) { l--; }
            return l;
        }
        function short(x, l) {
            return (substr(x, 0, 2) == "--") ? x :
                (m = match(substr(x, l+1), pat)) ? substr(x, 0, l+m) : x;
        }
        ($0 ~ prefix) {
            if (n == 0) { array[n++] = $0; l = length($0); next; }
            k = min(array[n-1], $0, l); y = short($0, k); a = 0;
            for (i = n-1; i >= 0; i--) {
                if (l != k) {
                    x = short(array[i], k); array[i] = x;
                } else { x = array[i]; }
                if (x == y) { a++; }
            }
            if (a == 0) { array[n++] = y; }; l = k;
         }
         END {
             for (key in array) print array[key];
         }';
};
function _go-make-show-targets() {
    local WORD="${1:-${WORD}}";
echo -ne "
$(date '+%F %T.%3N') show-targets start ${COMP_WORDS[@]}" >&2;
    if [ ${COMP_WORDS[0]} != "go-make" ]; then
       go-make show-targets-make;
    else go-make show-targets; fi |
       _go-make-filter "${WORD}";
echo -ne "
$(date '+%F %T.%3N') show-targets stop ${COMP_WORDS[@]}" >&2;
};
function _go-make-cpu-count() {
    case "$(uname -s)" in
        ( Linux* ) nproc;;
        ( Darwin* ) sysctl -n hw.ncpu;;
        (*) echo "1";;
    esac;
};
function __complete_go-make() {
echo -ne "
$(date '+%F %T.%3N') complete start ${COMP_WORDS[@]}" >&2;
    if [ "${COMP_WORDS[COMP_CWORD]}" == "=" ]; then
        WORD="${COMP_WORDS[COMP_CWORD-1]}=";
        COMP_WORDS=("${COMP_WORDS[@]:0:COMP_CWORD-1}" "${WORD}");
    elif [ "${COMP_WORDS[COMP_CWORD-1]}" == "=" ]; then
        WORD="${COMP_WORDS[COMP_CWORD-2]}=${COMP_WORDS[COMP_CWORD]}";
        COMP_WORDS=("${COMP_WORDS[@]:0:COMP_CWORD-2}" "${WORD}");
    else local WORD="${COMP_WORDS[COMP_CWORD]}"; fi;
echo -ne "
$(date '+%F %T.%3N') complete word ${COMP_WORDS[@]}" >&2;
    case "${WORD}" in
    ( --directory=* | --include-dir=* )
        COMPREPLY=($(compgen -d -- "${WORD#*=}"));;
    ( --file=* | --makefile=* | --config=* | --what-if=* )
        COMPREPLY=($(compgen -df -- "${WORD#*=}"));;
    ( --assume-new=* | --assume-old=* | --old-file=* | --new-file=* )
        COMPREPLY=($(compgen -df -- "${WORD#*=}"));;
    ( --completion=* )
        COMPREPLY=($(compgen -W "bash zsh" -- "${WORD#*=}"));;
    ( --output-sync=* )
        COMPREPLY=($(compgen -W "none line target recurse" -- "${WORD#*=}"));;
    ( --jobs=* )
        COMPREPLY=($(compgen -W "$(_go-make-cpu-count)" -- "${WORD#*=}"));;
    ( * )
echo -ne "
$(date '+%F %T.%3N') complete * start ${COMP_WORDS[@]}" >&2;
        local WORDS="$(_go-make-show-targets "${WORD}")";
echo -ne "
$(date '+%F %T.%3N') complete * targets ${COMP_WORDS[@]}" >&2;
        if [ "${COMP_WORDS[0]}" == "go-make" ]; then
            local WORDS="--async --completion= --config= ${WORDS}";
        fi;
echo -ne "
$(date '+%F %T.%3N') complete * end ${COMP_WORDS[@]}" >&2;
        COMPREPLY=($(compgen -W "${WORDS}" -- "${WORD}"));;
    esac;
 echo -ne "
$(date '+%F %T.%3N') complete reply ${COMP_WORDS[@]}" >&2;
    if [ "${#COMPREPLY[@]}" == "1" ] &&
        [[ "${COMPREPLY[0]}" == "--"*"=" ]]; then
        COMPREPLY=("${COMPREPLY[0]}" "${COMPREPLY[0]}*");
    fi;
echo -ne "
$(date '+%F %T.%3N') complete stop ${COMP_WORDS[@]}" >&2;
};
complete -F __complete_go-make go-make;

