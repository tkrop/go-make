## Maintained by: github.com/tkrop/go-make
version: "2"

run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 3m

  # The mode used to evaluate relative paths.
  # It's used by exclusions, Go plugins, and some linters.
  # The value can be: [ gomod | gitroot | cfg | wd ].
  # Default: cfg
  relative-path-mode: gomod

issues:
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50 (we recommend 100-200 but go for all)
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3 (we recommend 10-20)
  max-same-issues: 10

# This contains only configs which differ from defaults. For other configs see
# https://golangci-lint.run/docs/formatters/configuration/.
formatters:
  # List of enabled formatters (TODO: remove if cli support is added).
  enable: [ gofmt, gofumpt, goimports, golines ]

  # Define deviating settings for some formatters.
  settings:
    gofmt:
      # Apply the rewrite rules to the source before reformatting.
      # https://pkg.go.dev/cmd/gofmt
      # Default: []
      rewrite-rules:
        - pattern: 'interface{}'
          replacement: 'any'
        - pattern: 'a[b:len(a)]'
          replacement: 'a[b:]'

    golines:
      # Max line length, lines longer will be wrapped.
      # Default: 120 (we recommend 80 but compromise at 100)
      max-len: 100
      # Shorten single-line comments.
      # Default: false
      shorten-comments: true
      # Reformat structs tags.
      # Default: true
      reformat-tags: false

# This contains only configs which differ from defaults. For other configs see
# https://golangci-lint.run/docs/linters/configuration/.
linters:

  # Defining manually exclusions that make sense.
  exclusions:
    # Custom exclusion rules.
    rules:
      # Exclude go:generate directives from line length checking.
      - source: "^//\\s*go:generate\\s"
        linters: [ lll, revive ]
      # Exclude magic number in time setups and bit shifting.
      - source: "[0-9]+ ?\\* ?time\\.|(<<|>>) ?[0-9]+|[0-9]+ ?(<<|>>)"
        linters: [ mnd ]
      # Exclude certain standards from being applied in test.
      - path: "_test\\.go"
        linters: [ bodyclose, contextcheck, dupl, funlen, goconst, gosec, noctx,
          err113, wrapcheck, gochecknoglobals ]

      # Exclude error return value check because of too many false positives.
      - text: 'Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked'
        linters: [ errcheck ]
      # Exclude certain revive standards from being applied in tests.
      - path: "_test\\.go"
        text: "^(max-public-structs|function-length|cognitive-complexity):"
        linters: [ revive ]
      # Exclude dots in unfinished thoughts.
      - source: "(noinspection|TODO)"
        linters: [ godot ]

  # Define deviating settings for some linters.
  settings:
    cyclop:
      # The maximal code complexity to report.
      # Default: 10 (we allow up to 20)
      max-complexity: 20
      # The maximal average package complexity.
      # If it's higher than 0.0 (float) the check is enabled
      # Default: 0.0 (we recommend 10.0 as baseline)
      package-average: 10.0

    gocognit:
      # Minimal code complexity to report.
      # Default: 30 (we recommend 10-20)
      min-complexity: 20

    govet:
      # Enable all analyzers.
      # Default: false
      enable-all: true
      # Disable analyzers by name.
      # Run `go tool vet help` to see all analyzers.
      # Default: []
      disable:
        - fieldalignment # too strict
        - shadow # too strict to always work around

    gosec:
      # To specify a set of rules to explicitly exclude.
      # Available rules: https://github.com/securego/gosec#available-rules
      # Default: [] (issues are fixed)
      excludes: [ G307 ]

    gocritic:
      # Settings passed to gocritic. The settings key is the name of a supported
      # gocritic checker. The list of supported checkers can be find in
      # https://go-critic.github.io/overview.
      settings:
        captLocal:
          # Whether to restrict checker to params only.
          # Default: true
          paramsOnly: false
        underef:
          # Whether to skip (*x).method() calls where x is a pointer receiver.
          # Default: true
          skipRecvDeref: false
        ifElseChain:
          # Min number of if-else blocks that makes the warning trigger.
          # Default: 2
          minThreshold: 4

    lll:
      # Max line length, lines longer will be reported. '\t' is counted as 1
      # character by default, and can be changed with the tab-width option.
      # Default: 120 (we recommend 80 but compromise at 100)
      line-length: 100
      # Tab width in spaces.
      # Default: 1 (go uses 4 for visualization)
      tab-width: 4

    nolintlint:
      # Exclude following linters from requiring an explanation.
      # Default: [] (but some lll does not need explanation)
      allow-no-explanation: [ lll, wrapcheck ]
      # Enable to require an explanation of nonzero length after each nolint
      # directive.
      # Default: false
      require-explanation: true
      # Enable to require nolint directives to mention the specific linter being
      # suppressed.
      # Default: false
      require-specific: true

    revive:
      # Enable all available rules.
      # Default: false
      enable-all-rules: true
      # Sets the default severity.
      # See https://github.com/mgechev/revive#configuration
      # Default: warning
      severity: error

      rules:
        # Reports on missing or wrong file headers.
        # No need to enforce a file header.
        - name: file-header
          disabled: true
        # Reports on each file in a package having no package comments.
        # Rule prevents from having a central package documentation in `doc.go`.
        - name: package-comments
          disabled: true
        # Reports on mismatches between directory names and package names.
        # Rule prevents having a clearer hyphen readable directory name.
        - name: package-directory-mismatch
          disabled: true
        # Reports on exported comments not matching the name as first word.
        # Rule prevents being more relaxed in comment writing.
        - name: exported
          disabled: true
        # Ident error flow is buggy and throws false alerts.
        - name: indent-error-flow
          disabled: true
        # No need to exclude import shadowing.
        - name: import-shadowing
          disabled: true
        # Restricted alias naming conflicts with '.'-imports.
        - name: import-alias-naming
          disabled: true
        # Excluding '.'-import makes test package separation unnecessary difficult.
        - name: dot-imports
          disabled: true
        # Fails to disable writers that actually cannot return errors.
        - name: unhandled-error
          disabled: true
        # Fails to detect and exclude type safe usages of type assertions.
        - name: unchecked-type-assertion
          disabled: true
        # Fails to restrict sufficiently in switches with numeric values.
        - name: add-constant
          disabled: true
        # Rule prevents intentional usage of similar variable names.
        - name: flag-parameter
          disabled: true
        # Rule prevents intentional usage of similar private method names.
        - name: confusing-naming
          disabled: true
        # Rule prevents intentional usage of explicit exhaustive switches.
        - name: useless-fallthrough
          disabled: true
        # Rule prevents intentional usage of explicit exhaustive switches.
        - name: enforce-switch-style
          disabled: true
        # Rule prevents intentional usage of explicit branches.
        - name: identical-switch-branches
          disabled: true
        # Rule prevents intentional usage of explicit branches.
        - name: identical-ifelseif-branches
          disabled: true

        # Enables a more experienced cyclomatic complexity (we enabled a lot of
        # rules to counter-act the complexity trap).
        - name: cyclomatic
          arguments: [20]
        # Enables a more experienced cognitive complexity (we enabled a lot of
        # rules to counter-act the complexity trap).
        - name: cognitive-complexity
          arguments: [20]
        # Limit line-length to increase readability (compromise between 80 and
        # 120 is at 100).
        - name: line-length-limit
          arguments: [100]
        # We are a bit more relaxed with function length consistent with funlen.
        - name: function-length
          arguments: [40, 60]
        # Limit arguments of functions to the maximum understandable value.
        - name: argument-limit
          arguments: [6]
        # Limit results of functions to the maximum understandable value.
        - name: function-result-limit
          arguments: [4]
        # Raise the limit a bit to allow more complex package models.
        - name: max-public-structs
          arguments: [8]
        # I do not know what I'm doing here...
        - name: banned-characters
          arguments: ["Ω", "Σ", "σ"]
