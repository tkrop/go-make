## Maintained by: github.com/tkrop/go-make@v0.0.139

run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 3m

linters: {}
  # Placeholder for dynamically enabled linters.

issues:
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3 (we recommend 10-20)
  max-same-issues: 10

  # Use default exclusions for common false positives as defined in
  # https://golangci-lint.run/usage/false-positives/#default-exclusions
  # Default: true (we use false to sync behavior with Codacy)
  exclude-use-default: false

  # Defining manually exclusions that make sense.
  exclude-rules:
    # Exclude go:generate directives from line length checking.
    - source: "^//\\s*go:generate\\s"
      linters: [ lll, revive ]
    # Exclude magic number in time setups and bit shifting.
    - source: "[0-9]+ ?\\* ?time\\.|(<<|>>) ?[0-9]+|[0-9]+ ?(<<|>>)"
      linters: [ mnd ]
    # Exclude certain standards from being applied in test.
    - path: "_test\\.go"
      linters: [ bodyclose, contextcheck, dupl, funlen, goconst, gosec, noctx,
        err113, wrapcheck ]

    # Exclude error return value check because of too many false positives.
    - text: 'Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked'
      linters: [ errcheck ]
    # Exclude certain revive standards from being applied in tests.
    - path: "_test\\.go"
      text: "^(max-public-structs|function-length|cognitive-complexity):"
      linters: [ revive ]
    # Exclude dots in unfinished thoughts.
    - source: "(noinspection|TODO)"
      linters: [ godot ]


# This contains only configs which differ from defaults. For other configs see
# https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml
linters-settings:
  cyclop:
    # The maximal code complexity to report.
    # Default: 10 (we allow up to 20)
    max-complexity: 20
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0 (we recommend 10.0 as baseline)
    package-average: 10.0

  gocognit:
    # Minimal code complexity to report.
    # Default: 30 (we recommend 10-20)
    min-complexity: 20

  lll:
    # Max line length, lines longer will be reported. '\t' is counted as 1
    # character by default, and can be changed with the tab-width option.
    # Default: 120 (we recommend 80 but compromise at 100)
    line-length: 100
    # Tab width in spaces.
    # Default: 1 (go uses 4 for visualization)
    tab-width: 4

  nolintlint:
    # Exclude following linters from requiring an explanation.
    # Default: [] (but some lll does not need explanation)
    allow-no-explanation: [ lll, wrapcheck ]
    # Enable to require an explanation of nonzero length after each nolint
    # directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being
    # suppressed.
    # Default: false
    require-specific: true

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      - fieldalignment # too strict
      - shadow # too strict to always work around

  gosec:
    # To specify a set of rules to explicitly exclude.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: [] (issues are fixed)
    excludes: [ G307 ]

  gocritic:
    # Settings passed to gocritic. The settings key is the name of a supported
    # gocritic checker. The list of supported checkers can be find in
    # https://go-critic.github.io/overview.
    settings:
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        paramsOnly: false
      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver.
        # Default: true
        skipRecvDeref: false
      ifElseChain:
        # Min number of if-else blocks that makes the warning trigger.
        # Default: 2
        minThreshold: 4

  tenv:
    # The option `all` will run the linter on the whole test files regardless
    # of method signatures. Otherwise, only methods that take `*testing.T`,
    # `*testing.B`, and `testing.TB` as arguments are checked.
    # Default: false
    all: true

  revive:
    # Enable all available rules.
    # Default: false
    enable-all-rules: true
    # When set to false, ignores files with "GENERATED" header, similar to golint.
    # See https://github.com/mgechev/revive#available-rules for details.
    # Default: false
    ignore-generated-header: true
    # Sets the default severity.
    # See https://github.com/mgechev/revive#configuration
    # Default: warning
    severity: error

    rules:
      # No need to enforce a file header.
      - name: file-header
        disabled: true
      # Reports on each file in a package.
      - name: package-comments
        disabled: true
      # Reports on comments not matching the name as first word.
      - name: exported
        disabled: true
      # Ident error flow is buggy and throws false alerts.
      - name: indent-error-flow
        disabled: true
      # No need to exclude import shadowing.
      - name: import-shadowing
        disabled: true
      # Restricted alias naming conflicts with '.'-imports.
      - name: import-alias-naming
        disabled: true
      # Exluding '.'-import makes test package separation unnecessary difficult.
      - name: dot-imports
        disabled: true
      # Fails to disable writers that actually cannot return errors.
      - name: unhandled-error
        disabled: true
      # Fails to detect and exclude type safe usages of type assertions.
      - name: unchecked-type-assertion
        disabled: true
      # Fails to restrict sufficiently in switches with numeric values.
      - name: add-constant
        disabled: true
      # Rule prevents intentional usage of similar variable names.
      - name: flag-parameter
        disabled: true
      # Rule prevents intentional usage of similar private method names.
      - name: confusing-naming
        disabled: true

      # Enables a more experienced cyclomatic complexity (we enabled a lot of
      # rules to counter-act the complexity trap).
      - name: cyclomatic
        arguments: [20]
      # Enables a more experienced cognitive complexity (we enabled a lot of
      # rules to counter-act the complexity trap).
      - name: cognitive-complexity
        arguments: [20]
      # Limit line-length to increase readability.
      - name: line-length-limit
        arguments: [100]
      # We are a bit more relaxed with function length consistent with funlen.
      - name: function-length
        arguments: [40, 60]
      # Limit arguments of functions to the maximum understandable value.
      - name: argument-limit
        arguments: [6]
      # Limit results of functions to the maximum understandable value.
      - name: function-result-limit
        arguments: [4]
      # Raise the limit a bit to allow more complex package models.
      - name: max-public-structs
        arguments: [8]
      # I do not know what I'm doing here...
      - name: banned-characters
        arguments: ["Ω", "Σ", "σ"]
